=begin pod

=head1 NAME

Array::Sorted::Util - Raku utilities for (native) sorted arrays

=head1 SYNOPSIS

=begin code :lang<raku>

use Array::Sorted::Util;  # imports finds, inserts, deletes, nexts, prevs

my @a;
inserts(@a,$_) for <d c f e g h a b j i>;
say @a;               # [a b c d e f g h i j]

.say with finds(@a,"h");    # 7
.say with finds(@a,"z");    # (no output)

say deletes(@a,"e");  # e
say @a;               # [a b c d f g h i j]

=end code

=head1 DESCRIPTION

Array::Sorted::Util exports a collection of subroutines that create,
introspect and manipulate sorted arrays and optionally associated arrays.

=head1 SUBROUTINES

=head2 inserts

=begin code :lang<raku>

my @a;
my $pos = inserts(@a, "foo", :cmp(&[coll]));

inserts(@a, "foo");  # use infix:<cmp> by default

my @b;
my @c;
inserts(@b, 'foo', @c, 'bar');  # multiple associated lists

my @d = <a c e g i>;
my $pos = finds(@d,"d");
with $pos {
    say "Found at $pos";
}
else {
    inserts(@d,"d",:$pos);
}
say @d;  # (a c d e g i)

=end code

Insert the given object (the second argument) into the correct location in
the given array (the first argument).  Takes a named argument C<cmp> to
indicate the logic that should be used to determine order (defaults
to C<infix:<cmp>>).  Additionally takes array, object arguments to insert
the given object in the associated array at the same location.  Returns the
position at which the object(s) were actually inserted.

Can also take an optional named argument C<pos> from a previously unsuccessful
call to C<finds> as a shortcut to prevent needing to search for the object
again.

By default, will replace any existing object that matches.  The optional
C<:force> named argument can be specified to insert the object after any
existing object.

=head2 finds

=begin code :lang<raku>

my @a = <a b c d e f g h i j>;
.say with finds(@a, "h");   # 7, use infix:<cmp> by default
say "could not be found" without finds(@a, "z", :cmp(&[coll]));

=end code

Attempt to find the given object (the second argument) in the given
sorted array (the first argument).  Takes a named argument C<cmp> to
indicate the logic that should be used to determine order (defaults
to C<infix:<cmp>>).  Returns a special B<undefined> value if the object
could not be found.

=head2 nexts

=begin code :lang<raku>

my @a = <a b c d e f g h i j>;
say nexts(@a, "g");  # h
say nexts(@a, "j");  # Nil

=end code

Return the object B<after> the given object (the second argument) in the
given sorted array (the first argument).  Takes a named argument C<cmp> to
indicate the logic that should be used to determine order (defaults to
C<infix:<cmp>>).  Returns C<Nil> if no object could be found.

=head2 prevs

=begin code :lang<raku>

my @a = <a b c d e f g h i j>;
say prevs(@a, "g");  # f
say prevs(@a, "a");  # Nil

=end code

Return the object B<before> the given object (the second argument) in the
given sorted array (the first argument).  Takes a named argument C<cmp> to
indicate the logic that should be used to determine order (defaults to
C<infix:<cmp>>).  Returns C<Nil> if no object could be found.

=head2 deletes

=begin code :lang<raku>

my @a = <a b c d e f g h i j>;
say deletes(@a, "e");                 # e, use &infix:<cmp> by default
say deletes(@a, "z", :cmp(&[coll]));  # Nil

=end code

Attempt to remove the given object (the second argument) from the given
sorted array (the first argument).  Takes a named argument C<cmp> to
indicate the logic that should be used to determine order (defaults
to C<infix:<cmp>>).  Additionally takes array arguments to delete elements
in the associated array at the same location.  Returns the value of
the primary removed object.

=head1 INSPIRATION

The inspiration for the names of these subroutines came from the
L<TUTOR Programming Language|https://en.wikipedia.org/wiki/TUTOR>, which
had C<finds>, C<inserts> and C<deletes> commands, where the postfix C<s>
indicated the B<sorted> version of these commands.

The L<original manual|https://files.eric.ed.gov/fulltext/ED208879.pdf>
contains more information, specifically pages C16 and C17.

=head1 AUTHOR

Elizabeth Mattijsen <liz@raku.rocks>

Source can be located at: https://github.com/lizmat/Array-Sorted-Util .
Comments and Pull Requests are welcome.

If you like this module, or what Iâ€™m doing more generally, committing to a
L<small sponsorship|https://github.com/sponsors/lizmat/>  would mean a great
deal to me!

=head1 COPYRIGHT AND LICENSE

Copyright 2021, 2024, 2025 Elizabeth Mattijsen

This library is free software; you can redistribute it and/or modify it
under the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4
