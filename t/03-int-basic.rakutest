use Test;
use List::Sorted::Util;

plan 3;

subtest "finds / deletes on simple int list" =>  {
    my int @a = 1,3,5,7,9;
    plan 3 * @a + 4;

    for @a.kv -> $i, $number {
        is finds(@a, $number), $i, "did we find '$number'";
    }

    for @a.kv -> $i, $number {
        is finds(@a, $number, :cmp(&[<=>])), $i,
        "did we find '$number' using &[<=>]";
    }

    for 0,10,6 {
        is-deeply finds(@a, $_), Nil, "did we not find '$_'";
    }

    for @a.clone.pick(*) {
        is-deeply deletes(@a,$_), $_, "did '$_' get deleted";
    }
    is +@a, 0, 'Did we delete all elements';
}

subtest "finds / deletes on all ints from this file" => {
    my int @a = $?FILE.IO.comb(/\d+/).sort(*.Int).squish.map: *.Int;
    plan 2 * @a + 1;

    for @a.kv -> $i, $number {
        is finds(@a, $number), $i, "did we find '$number'";
    }

    for @a.clone.pick(*) {
        is-deeply deletes(@a,$_,:cmp(&[<=>])), $_,
        "did '$_' get deletedi with &[<=>]";
    }
    is +@a, 0, 'Did we delete all elements';
}

subtest "inserts on an empty int list" => {
    my int @a = 1,3,5,7,9;
    my int @b;

    plan @a + 1;

    for @a.pick(*) {
        is-deeply inserts(@b,$_), @b, "inserting '$_'";
    }
    is-deeply @b, @a, "did we get a correctly sorted list";
}

# vim: expandtab shiftwidth=4
