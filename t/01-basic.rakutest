use Test;
use Array::Sorted::Util;

plan 3;

my @instants;
for ^10 {
    @instants.push(now);
    sleep .1;
}

subtest "finds on simple Instant array" =>  {
    my @a = @instants;
    plan @a + 2;

    for @a.kv -> $i, $instant {
        is finds(@a, $instant), $i, "did we find '$instant'";
    }

    for Instant.from-posix(0), Instant.from-posix(time + 100) {
        nok finds(@a, $_).defined, "did we not find '$_'";
    }
}

subtest "inserts on an empty array" => {
    my @a = @instants;
    my @b;

    plan @a + 2;

    for @a.kv -> $i, $value {
        is inserts(@b,$value).Int, $i, "inserted ok at $i";
    }
    is-deeply @b, @a, "did we get a correctly sorted array (1)";

    inserts(@b,$_) for @a.pick(*);
    is-deeply @b, @a, "did we get a correctly sorted array (2)";
}

subtest "deletes on an array" => {
    my @a = @instants;

    plan @a + 1;

    for @instants.pick(*) {
        is-deeply deletes(@a,$_), $_, "did '$_' get deleted";
    }
    is +@a, 0, "did we empty out the array";
}

# vim: expandtab shiftwidth=4
