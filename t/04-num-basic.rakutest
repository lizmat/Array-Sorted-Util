use Test;
use Array::Sorted::Util;

plan 4;

subtest "finds on simple num list" =>  {
    my num @a = 1e0,3e0,5e0,7e0,9e0;
    plan 3 * @a + 7;

    for @a.kv -> $i, $number {
        is finds(@a, $number), $i, "did we find '$number'";
    }

    for @a.kv -> $i, $number {
        is finds(@a, $number, :cmp(&[<=>])), $i,
        "did we find '$number' using &[<=>]";
    }

    for 0e0, 0, 10e0, 5, 6e0, 3 -> $number, $pos {
        my $index := finds(@a,$number);
        nok $index.defined, "did the search for '$number' fail";
        is $index.Int, $pos, "did it give insert location $index";
    }

    for @a.clone.pick(*) {
        is-deeply deletes(@a,$_), $_, "did '$_' get deleted";
    }
    is +@a, 0, 'Did we delete all elements';
}

subtest "finds on all nums from this file" => {
    my num @a = $?FILE.IO.comb(/\d+ e0/).map(*.Num).sort.squish;
    plan 2 * @a + 1;

    for @a.kv -> $i, $number {
        is finds(@a, $number), $i, "did we find '$number'";
    }

    for @a.clone.pick(*) {
        is-deeply deletes(@a,$_,:cmp(&[<=>])), $_,
        "did '$_' get deleted with &[<=>]";
    }
    is +@a, 0, 'Did we delete all elements';
}

subtest "inserts on an empty num list" => {
    my num @a = 1e0,3e0,5e0,7e0,9e0;
    my num @b;

    plan 1;

    inserts(@b,$_) for @a.clone.pick(*);
    is-deeply @b, @a, "did we get a correctly sorted list";
}

subtest "inserts / deletes with associated list" => {
    my num @a = 1e0,3e0,5e0,7e0,9e0;
    my num @b;
    my num @o;

    plan @a + 4;

    inserts(@b, $_, @o, $_) for @a.pick(*);
    is-deeply @b, @a,
      "did we get a correctly sorted list";
    is-deeply @o, @a,
      "did we get a correctly sorted alternate list";

    for @a.pick(*) {
        is-deeply deletes(@b, $_, @o), $_,
          "did '$_' get deleted";
    }
    is +@b, 0, 'Did we delete all elements in primary';
    is +@o, 0, 'Did we delete all elements in secondary';
}

# vim: expandtab shiftwidth=4
