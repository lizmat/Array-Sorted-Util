use Test;
use Array::Sorted::Util;

plan 4;

subtest "finds / deletes on simple letter array" =>  {
    my str @a = <a b c d e f g h i j>;
    plan 4 * @a + 11;

    for @a.kv -> $i, $letter {
        is finds(@a, $letter), $i, "did we find '$letter'";
    }

    for @a.kv -> $i, $letter {
        is finds(@a, $letter.uc, :cmp(*.lc cmp *.lc)), $i,
        "did we find '$letter.uc()'";
    }

    for @a.kv -> $i, $letter {
        is finds(@a, $letter, :cmp(&[coll])), $i,
        "did we find '$letter' using &[coll]";
    }

    for "A", 0, "z", 10, "ee", 5 -> $letter, $pos {
        my $index := finds(@a,$letter);
        nok $index.defined, "did the search for '$letter' fail";
        is $index.Int, $pos, "did it give insert location $index";
    }

    is-deeply nexts(@a, @a[1]), @a[2], 'does nexts find the next';
    is-deeply nexts(@a, @a[9]), Nil,   'does nexts handles end ok';

    is-deeply prevs(@a, @a[1]), @a[0], 'does prevs find the previous';
    is-deeply prevs(@a, @a[0]), Nil,   'does prevs handles end ok';

    for @a.clone.pick(*) {
        is-deeply deletes(@a,$_), $_, "did '$_' get deleted";
    }
    is +@a, 0, 'Did we delete all elements';
}

subtest "finds / deletes on all words from this file" => {
    my str @a = $?FILE.IO.comb(/\w+/).sort.squish;
    plan 2 * @a + 1;

    for @a.kv -> $i, $word {
        is finds(@a, $word), $i, "did we find '$word'";
    }

    for @a.clone.pick(*) {
        is-deeply deletes(@a,$_,:cmp(&[cmp])), $_,
          "did '$_' get deleted using &[cmp]";
    }
    is +@a, 0, 'Did we delete all elements';
}

subtest "inserts on an empty array" => {
    my str @a = <a b c d e f g h i j>;
    my str @b;

    plan 1;

    inserts(@b, $_) for @a.pick(*);
    is-deeply @b, @a, "did we get a correctly sorted array";
}

subtest "inserts / deletes with associated array" => {
    my str @a = <a b c d e f g h i j>;
    my str @b;
    my str @o;

    plan @a + 5;

    inserts(@b, $_, @o, $_) for @a.pick(*);
    is-deeply @b, @a,
      "did we get a correctly sorted array";
    is-deeply @o, @a,
      "did we get a correctly sorted alternate array";

    for @a.pick(*) {
        is-deeply deletes(@b, $_, @o), $_,
          "did '$_' get deleted";
    }
    is +@b, 0, 'Did we delete all elements in primary';
    is +@o, 0, 'Did we delete all elements in secondary';

    for @a.pick(*) -> $letter {
        inserts(@b, $letter, :pos($_)) without finds(@b, $letter);
    }
    is-deeply @b, @a, "did we get a correctly sorted array";
}

# vim: expandtab shiftwidth=4
