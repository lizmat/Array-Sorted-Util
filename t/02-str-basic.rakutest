use Test;
use List::Sorted::Util;

plan 3;

subtest "finds / deletes on simple letter list" =>  {
    my str @a = <a b c d e f g h i j>;
    plan 4 * @a + 4;

    for @a.kv -> $i, $letter {
        is finds(@a, $letter), $i, "did we find '$letter'";
    }

    for @a.kv -> $i, $letter {
        is finds(@a, $letter.uc, :cmp(*.lc cmp *.lc)), $i,
        "did we find '$letter.uc()'";
    }

    for @a.kv -> $i, $letter {
        is finds(@a, $letter, :cmp(&[coll])), $i,
        "did we find '$letter' using &[coll]";
    }

    for "A", "Z", "ee" {
        is-deeply finds(@a, $_), Nil, "did we not find '$_'";
    }

    for @a.clone.pick(*) {
        is-deeply deletes(@a,$_), $_, "did '$_' get deleted";
    }
    is +@a, 0, 'Did we delete all elements';
}

subtest "finds / deletes on all words from this file" => {
    my str @a = $?FILE.IO.comb(/\w+/).sort.squish;
    plan 2 * @a + 1;

    for @a.kv -> $i, $word {
        is finds(@a, $word), $i, "did we find '$word'";
    }

    for @a.clone.pick(*) {
        is-deeply deletes(@a,$_,:cmp(&[cmp])), $_,
        "did '$_' get deleted using &[cmp]";
    }
    is +@a, 0, 'Did we delete all elements';
}

subtest "inserts on an empty list" => {
    my str @a = <a b c d e f g h i j>;
    my str @b;

    plan @a + 1;

    for @a.pick(*) {
        is-deeply inserts(@b,$_), @b, "inserting '$_'";
    }
    is-deeply @b, @a, "did we get a correctly sorted list";
}

# vim: expandtab shiftwidth=4
